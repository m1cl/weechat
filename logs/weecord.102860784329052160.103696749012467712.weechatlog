2017-09-10 15:01:31	Bas	Java backend? Not sure many would be proficient in it on React server. Some seniors would probably know though.  I for one am first time hearing of that aspect oriented programming thing 😃
2017-09-10 15:03:57	Deviad	Long story short, AOP is the decorator pattern now with es7
2017-09-10 15:04:05	Deviad	or Typescript or Python
2017-09-10 15:04:20	Deviad	when you do @Component in Angular for example
2017-09-10 15:06:12	Deviad	It's just a hell to configure when you use Spring Boot
2017-09-10 15:07:16	Deviad	Actually AOP is more of an implementation of the decorator pattern, allowing annotations
2017-09-10 15:07:47	Deviad	the annotation would be the "@something("whatever")"
2017-09-10 15:08:39	qwiipo	Hi all, I am facing a problem with npm install. Just cloning the boilerplate and trying to install it it gives me error, asking to run the command as root/Administrator.
2017-09-10 15:08:39		https://media.discordapp.net/attachments/103696749012467712/356425738607656961/discord1.JPG
2017-09-10 15:41:54	Paisley	those colours 😃
2017-09-10 15:42:05	Bas	:))
2017-09-10 15:42:16	Bas	```jsx
2017-09-10 15:42:16		import Loadable from 'react-loadable';
2017-09-10 15:42:16		import Loading from './my-loading-component';
2017-09-10 15:42:16		const LoadableComponent = Loadable({
2017-09-10 15:42:16		  loader: () => import('./my-component'),
2017-09-10 15:42:16		  loading: Loading,
2017-09-10 15:42:16		});
2017-09-10 15:42:16		export default class App extends React.Component {
2017-09-10 15:42:16		  render() {
2017-09-10 15:42:16		    return <LoadableComponent/>;
2017-09-10 15:42:16		  }
2017-09-10 15:42:16		}
2017-09-10 15:42:16		```  these are the docs
2017-09-10 15:42:28	Bas	should work no?
2017-09-10 15:43:58	qwiipo	@Bas Yes it is windows. I am admin on the current account and also I've tryed opening GitBash as Administrator, but nothing changes. I am running npm 5.4.1. I am now downgrading to 5.3 even though i've seen many people having problem with npm v5
2017-09-10 15:44:35	Bas	@qwiipo try npm@4.6.1 no problems regarding react native on that one. Just an idea, I dont know about linking and permissions in windows
2017-09-10 15:46:01	Bas	maybe if I add it ad dev dep
2017-09-10 18:05:46	infected mushroom	Okay!
2017-09-10 18:05:53	acemarke	so, _now_ we get to the React side of things
2017-09-10 18:06:14	acemarke	the React-Redux library and its `connect()` function create wrapper components that abstract out the process of interacting with the store
2017-09-10 18:06:29	acemarke	ie, you _could_ write that code yourself, but you'd have to duplicate it every time you want a component to use Redux
2017-09-10 18:06:48	acemarke	(skimming over some details here because you don't need to worry about them yet)
2017-09-10 18:07:09	acemarke	So, let's say we have a `<UserComponent>`
2017-09-10 18:07:34	acemarke	and we're going to connect it to Redux
2017-09-10 18:07:51	infected mushroom	`connect()` basically connect my React and Redux together.. More like Connector between the application and the Database. Is that right way?
2017-09-10 18:07:57	acemarke	roughly, yeah
2017-09-10 18:09:18	acemarke	```js
2017-09-10 18:09:18		const mapStateToProps = (state, ownProps) => {
2017-09-10 18:09:18		    const user = state.users[ownProps.index};
2017-09-10 18:09:18		    return {user};
2017-09-10 18:09:18		}
2017-09-10 18:09:18		const UserComponent = (props) => (
2017-09-10 18:09:18		    <div>
2017-09-10 18:09:18		        User: {props.user.firstName + " " + props.user.lastName}
2017-09-10 18:09:18		    </div>
2017-09-10 18:09:18		);
2017-09-10 18:09:18		const ConnectedUserComponent = connect(mapStateToProps)(UserComponent);
2017-09-10 18:09:18		```
2017-09-10 18:09:43	acemarke	`ConnectedUserComponent` is the "wrapper component" generated by `connect()`
2017-09-10 18:10:08	acemarke	it will call the `mapStateToProps` function you provide, take the data you extracted from Redux, and pass that data as props to the component
2017-09-10 18:11:02	infected mushroom	Okay. I knew that the `mapStateToProps` basically extract the whole state and pass it to the container as the props.
2017-09-10 18:11:32	acemarke	sort of.  Your `mapState` function is _given_ the entire state, and it should extract whatever specific values this component needs
2017-09-10 18:11:43	acemarke	so that's the state part
2017-09-10 18:11:49	acemarke	now for the dispatching
2017-09-10 18:11:49	infected mushroom	Okay!
2017-09-10 18:12:05	acemarke	by default, `connect` will also give your component the store's `dispatch` function as a prop
2017-09-10 18:12:10	acemarke	let me rework that UserComponent example
2017-09-10 18:14:03	acemarke	```js
2017-09-10 18:14:03		class UserComponent extends React.Component {
2017-09-10 18:14:03		    changeUserName = () => {
2017-09-10 18:14:03		        this.props.dispatch({type : "CHANGE_USER_NAME", firstName : "Joe", lastName : "Cool"});
2017-09-10 18:14:03		    }
2017-09-10 18:14:03		    render() {
2017-09-10 18:14:03		        const {user} = this.props;
2017-09-10 18:14:03		        return (
2017-09-10 18:14:03		            <div>
2017-09-10 18:14:03		                User: {user.firstName + " " + user.lastName}
2017-09-10 18:14:03		                <button onClick={this.changeUserName}>Change User Name</button>;
2017-09-10 18:14:03		           </div>
2017-09-10 18:14:03		        );
2017-09-10 18:14:03		    }
2017-09-10 18:14:03		}
2017-09-10 18:14:03		```
2017-09-10 18:14:29	acemarke	so `connect` passes in `this.props.dispatch`, and the component can dispatch actions
2017-09-10 18:15:17	acemarke	good so far?
2017-09-10 18:16:00	infected mushroom	wait a min please
2017-09-10 18:21:01	infected mushroom	Okay.
2017-09-10 18:21:09	infected mushroom	Got it!
2017-09-10 18:21:16	acemarke	awright, so, final couple step
2017-09-10 18:21:20	acemarke	EDIT: awright, so, final couple steps
2017-09-10 18:21:28	acemarke	we can use action creators here too:
2017-09-10 18:21:43	acemarke	let me change the function name to be clearer
2017-09-10 18:21:57	acemarke	EDIT: ```js
2017-09-10 18:21:57		class UserComponent extends React.Component {
2017-09-10 18:21:57		    onChangeUserNameClicked = () => {
2017-09-10 18:21:57		        this.props.dispatch({type : "CHANGE_USER_NAME", firstName : "Joe", lastName : "Cool"});
2017-09-10 18:21:57		    }
2017-09-10 18:21:57		    render() {
2017-09-10 18:21:57		        const {user} = this.props;
2017-09-10 18:21:57		        return (
2017-09-10 18:21:57		            <div>
2017-09-10 18:21:57		                User: {user.firstName + " " + user.lastName}
2017-09-10 18:21:57		                <button onClick={this.onChangeUserNameClicked }>Change User Name</button>;
2017-09-10 18:21:57		           </div>
2017-09-10 18:21:57		        );
2017-09-10 18:21:57		    }
2017-09-10 18:21:57		}
2017-09-10 18:21:57		```
2017-09-10 18:22:12	acemarke	edited the example to be `onChangeUserNameClicked `
2017-09-10 18:22:18	acemarke	so now let's use an action creator instead
2017-09-10 18:22:35	acemarke	```js
2017-09-10 18:22:35		onChangeUserNameClicked  = () => {
2017-09-10 18:22:35		    this.props.dispatch(changeUserName("Joe", "Cool"));
2017-09-10 18:22:35		}
2017-09-10 18:22:35		```
2017-09-10 18:22:42	acemarke	same thing, but using an action creator
2017-09-10 18:22:56	acemarke	right?
2017-09-10 18:23:24	infected mushroom	Yup. Got it
2017-09-10 18:23:38	acemarke	okay.  But, by referring to `dispatch`, our component "knows" that it's talking to Redux
2017-09-10 18:23:53	acemarke	maybe we want to reuse this React component in another app that doesn't use Redux
2017-09-10 18:24:20	acemarke	we'd rather be able to do `this.props.changeUserName("Joe", "Cool")`
2017-09-10 18:24:25	infected mushroom	Yeah, You are right. But one thing. Doesn't `mapStateToProps` also means that our app is talking to redux?
2017-09-10 18:24:34	acemarke	maybe in this app that should dispatch a Redux action, but in another app, it should update state in a parent component
2017-09-10 18:24:52	acemarke	yeah, but the component is receiving that data as `this.props.user`
2017-09-10 18:24:59	acemarke	ie, it doesn't "know" that value is coming from Redux
2017-09-10 18:25:04	acemarke	it's just coming from "a parent component"
2017-09-10 18:25:30	acemarke	so, `connect()` takes a second argument: a function you provide called `mapDispatchToProps`
2017-09-10 18:25:49	acemarke	if you provide that function, it passes in the reference to `dispatch`
2017-09-10 18:26:00	infected mushroom	Got it
2017-09-10 18:26:02	acemarke	and you can do stuff like this:
2017-09-10 18:26:15	pandoraddict	Ok so I coming back to this a day later, but I wanted to be assured that I got it..
2017-09-10 18:26:15		```
2017-09-10 18:26:15		class Counter extends React.Component {
2017-09-10 18:26:15		    state = {counter : 0}
2017-09-10 18:26:15		    onClick = () => {
2017-09-10 18:26:15		        this.setState({counter : this.state.counter + 1});
2017-09-10 18:26:15		    }
2017-09-10 18:26:15		    render() {
2017-09-10 18:26:15		        const {counter} = this.state;
2017-09-10 18:26:15		        return (
2017-09-10 18:26:15		            <div>
2017-09-10 18:26:15		                Button was clicked:
2017-09-10 18:26:15		                <div>{counter} times</div>
2017-09-10 18:26:15		                <button onClick={this.onClick}>Click Me</button>
2017-09-10 18:26:15		            </div>
2017-09-10 18:26:15		        );
2017-09-10 18:26:15		    }
2017-09-10 18:26:15		}
2017-09-10 18:26:15		render(<Counter />, mountNode);
2017-09-10 18:26:15		```
2017-09-10 18:26:15		looking at line 9
2017-09-10 18:26:15		I know that a variable is being created but because of the brackets I assume it is taking the name from a previous instance - a property - either from line 2 or 5
2017-09-10 18:26:38	acemarke	```js
2017-09-10 18:26:38		function mapDispatchToProps(dispatch) => {
2017-09-10 18:26:38		    return {
2017-09-10 18:26:38		        changeUserName : (firstName, lastName) => dispatch({type : "CHANGE_USER_NAME", firstName, lastName})
2017-09-10 18:26:38		    }
2017-09-10 18:26:38		}
2017-09-10 18:26:38		```
2017-09-10 18:26:52	pandoraddict	EDIT: Ok so I coming back to this a day later, but I wanted to be assured that I got it..
2017-09-10 18:26:52		```
2017-09-10 18:26:52		class Counter extends React.Component {
2017-09-10 18:26:52		    state = {counter : 0}
2017-09-10 18:26:52		    onClick = () => {
2017-09-10 18:26:52		        this.setState({counter : this.state.counter + 1});
2017-09-10 18:26:52		    }
2017-09-10 18:26:52		    render() {
2017-09-10 18:26:52		        const {counter} = this.state;
2017-09-10 18:26:52		        return (
2017-09-10 18:26:52		            <div>
2017-09-10 18:26:52		                Button was clicked:
2017-09-10 18:26:52		                <div>{counter} times</div>
2017-09-10 18:26:52		                <button onClick={this.onClick}>Click Me</button>
2017-09-10 18:26:52		            </div>
2017-09-10 18:26:52		        );
2017-09-10 18:26:52		    }
2017-09-10 18:26:52		}
2017-09-10 18:26:52		render(<Counter />, mountNode);
2017-09-10 18:26:52		```
2017-09-10 18:26:52		looking at line 9
2017-09-10 18:26:52		I know that a variable const is being created but because of the brackets I assume it is taking the name from a previous instance - a property - either from line 2 or 5
2017-09-10 18:27:05	acemarke	and now the component can call `this.props.changeUserName("Joe", "Cool")`, and that function will call `dispatch()`
2017-09-10 18:27:39	infected mushroom	Within dispatch you are calling the action right?
2017-09-10 18:27:52	acemarke	"dispatching" the action
2017-09-10 18:28:11	acemarke	calling the dispatch function, and passing in the action object as the parameter
2017-09-10 18:28:21	infected mushroom	Correct
2017-09-10 18:28:33	acemarke	but, we've already established that using action creator functions is a good practice
2017-09-10 18:28:34	acemarke	so we could do:
2017-09-10 18:28:44	infected mushroom	Yes
2017-09-10 18:28:50	acemarke	```js
2017-09-10 18:28:50		function mapDispatchToProps(dispatch) => {
2017-09-10 18:28:50		    return {
2017-09-10 18:28:50		        changeUserName : (firstName, lastName) => dispatch(changeUserName(firstName, lastName))
2017-09-10 18:28:50		    }
2017-09-10 18:28:50		}
2017-09-10 18:28:50		```
2017-09-10 18:29:12	infected mushroom	Yeah, Isn't using the action creator a better practice ?
2017-09-10 18:29:26	acemarke	and Redux provides a utility function called `bindActionCreators` to simplify that "wrapping up functions with `dispatch`" approach:
2017-09-10 18:29:47	infected mushroom	okay
2017-09-10 18:29:53	acemarke	```js
2017-09-10 18:29:53		import {bindActionCreators} from "redux";
2017-09-10 18:29:53		function mapDispatchToProps(dispatch) => {
2017-09-10 18:29:53		    return {
2017-09-10 18:29:53		        changeUserName : bindActionCreators(changeUserName, dispatch)
2017-09-10 18:29:53		    }
2017-09-10 18:29:53		}
2017-09-10 18:29:53		```
2017-09-10 18:30:11	acemarke	and we can make it even simpler.  `bindActionCreators` can take an object of action creators
2017-09-10 18:30:45	acemarke	```js
2017-09-10 18:30:45		const actionCreators = {changeUserName};
2017-09-10 18:30:45		function mapDispatchToProps(dispatch) {
2017-09-10 18:30:45		    return bindActionCreators(actionCreators, dispatch);
2017-09-10 18:30:45		}
2017-09-10 18:30:45		```
2017-09-10 18:31:03	acemarke	and finally, you can actually pass that object of action creators right to `connect`, instead of writing a real function named `mapDispatchToProps`
2017-09-10 18:31:26	acemarke	```js
2017-09-10 18:31:26		const actionCreators = {changeUserName};
2017-09-10 18:31:26		const ConnectedComponent = connect(mapStateToProps, actionCreators)(MyComponent);
2017-09-10 18:31:26		```
2017-09-10 18:31:39	acemarke	and the component still gets `this.props.changeUserName`
2017-09-10 18:31:48	acemarke	and as soon as you call it, it will dispatch the action to the store
2017-09-10 18:32:00	acemarke	so, recapping:
2017-09-10 18:32:16	acemarke	- an "action" is a plain object with a type field.  The only way to make Redux update the state is to call `store.dispatch(someAction)`
2017-09-10 18:32:27	acemarke	- an "action creator" is just a function that creates and returns an action object
2017-09-10 18:32:48	acemarke	- `mapDispatchToProps` lets you wrap up dispatching actions so that the component doesn't "know" it's talking to Redux
2017-09-10 18:33:19	acemarke	- `connect()` lets you pass an object full of action creators instead, so you don't actually need to write a real `mapDispatchToProps` function
2017-09-10 18:33:43	infected mushroom	Crystal Clear everything! Man! YOu should teach few course on the udemy!
2017-09-10 18:33:46	acemarke	:)
2017-09-10 18:33:50	infected mushroom	thank you acemarke!
2017-09-10 18:34:07	acemarke	and NOW you might want to read my post on "Why use action creators?"
2017-09-10 18:34:15	acemarke	http://blog.isquaredsoftware.com/2016/10/idiomatic-redux-why-use-action-creators/
2017-09-10 18:34:15	acemarke	EDIT: http://blog.isquaredsoftware.com/2016/10/idiomatic-redux-why-use-action-creators/
2017-09-10 18:34:37	infected mushroom	just came to know you are a maintainer of the redux! You should be thinking how dumb these questions are which i asked!
2017-09-10 18:34:57	pandoraddict	hey can I bother you for a sec @acemarke
2017-09-10 18:35:03	🐳 Lyrrad 🐳	There are no dumb questions. 😉
2017-09-10 18:35:13	pandoraddict	Ok so I coming back to this a day later, but I wanted to be assured that I got it..
2017-09-10 18:35:13		```
2017-09-10 18:35:13		class Counter extends React.Component {
2017-09-10 18:35:13		    state = {counter : 0}
2017-09-10 18:35:13		    onClick = () => {
2017-09-10 18:35:13		        this.setState({counter : this.state.counter + 1});
2017-09-10 18:35:13		    }
2017-09-10 18:35:13		    render() {
2017-09-10 18:35:13		        const {counter} = this.state;
2017-09-10 18:35:13		        return (
2017-09-10 18:35:13		            <div>
2017-09-10 18:35:13		                Button was clicked:
2017-09-10 18:35:13		                <div>{counter} times</div>
2017-09-10 18:35:13		                <button onClick={this.onClick}>Click Me</button>
2017-09-10 18:35:13		            </div>
2017-09-10 18:35:13		        );
2017-09-10 18:35:13		    }
2017-09-10 18:35:13		}
2017-09-10 18:35:13		render(<Counter />, mountNode);
2017-09-10 18:35:13		```
2017-09-10 18:35:13		looking at line 9
2017-09-10 18:35:13		I know that a variable const is being created but because of the brackets I assume it is taking the name from a previous instance - a property - either from line 2 or 5
2017-09-10 18:36:05	acemarke	@infected mushroom : it's fine , no worries :)
2017-09-10 18:36:20	acemarke	<@190564121551306752> : that's an example of "destructuring"
2017-09-10 18:36:27	acemarke	it's the same as `const counter = this.state.counter`
2017-09-10 18:36:33	Paisley	but they don't call themselves "maintainers" they are really just "reducers", reducing the code into its final form 😛
2017-09-10 18:38:17	pandoraddict	nice ok I just wasnt sure, I thought perhaps it was accessing the function, thanks its easier then, I will watch a quick video on "destructuring", it makes sense that it returns a key otherwise - id be in trouble haha
2017-09-10 18:39:07	acemarke	yeah, that's syntax from the ES6 version of Javascript
2017-09-10 18:39:23	acemarke	I've got links to a bunch of articles explaining ES6 syntax at https://github.com/markerikson/react-redux-links/blob/master/es6-features.md
2017-09-10 18:39:23	acemarke	EDIT: I've got links to a bunch of articles explaining ES6 syntax at https://github.com/markerikson/react-redux-links/blob/master/es6-features.md
2017-09-10 18:46:31	infected mushroom	is there any difference if we declare our component as classes instead of functions even if they are stateless?
2017-09-10 18:48:41	MartinNord	hey, if im fetching data from different apis and i want to have "one big" loading screen that disappears when everything has been fetched, how would I do that?
2017-09-10 19:24:21	pandoraddict	<@103353066316640256> I watched some videos from Freecodecamp and Tyler Mcginnes i get it now haha
2017-09-10 19:24:42	acemarke	cool :)
2017-09-10 19:25:08	pandoraddict	the next slide on Render Logic - however...
2017-09-10 19:26:37	MartinNord	does anyone know why `isLoading` is always true for me?
2017-09-10 19:26:37		Action:
2017-09-10 19:26:37		```const setDoors = data => {
2017-09-10 19:26:37		  return {
2017-09-10 19:26:37		    type: 'SET_DOORS',
2017-09-10 19:26:37		    payload: {
2017-09-10 19:26:37		      setDoors: data
2017-09-10 19:26:37		    }
2017-09-10 19:26:37		  }
2017-09-10 19:26:37		}```
2017-09-10 19:26:37		...
2017-09-10 19:26:37		```export const fetchDoors = () => async (dispatch, getState) => {
2017-09-10 19:26:37		  try {
2017-09-10 19:26:37		    dispatch({ type: 'FETCH_DOORS' })
2017-09-10 19:26:37		    const doors = await axios.get(`${settings.hostname}/locks`).data
2017-09-10 19:26:37		    dispatch(setDoors(doors))```
2017-09-10 19:26:37		Reducer:
2017-09-10 19:26:37		```const initialState = {
2017-09-10 19:26:37		  isLoading: false
2017-09-10 19:26:37		}
2017-09-10 19:26:37		export const fetchDoors = (state = initialState, action) => {
2017-09-10 19:26:37		  switch (action.type) {
2017-09-10 19:26:37		    case 'FETCH_DOORS':
2017-09-10 19:26:37		      return { ...state, isLoading: true }
2017-09-10 19:26:37		    case 'FETCH_DOORS_SUCCESS':
2017-09-10 19:26:37		      return { ...state, doors: action.payload.setDoors, isLoading: false }```
2017-09-10 19:26:57	MartinNord	And when I log it I'm always getting `true`:
2017-09-10 19:26:57		```const mapStateToProps = state => {
2017-09-10 19:26:57		  console.log(state.fetchDoors.isLoading)
2017-09-10 19:26:57		  return {
2017-09-10 19:26:57		    doors: state.fetchDoors.doors,
2017-09-10 19:26:57		    isLoading: state.fetchDoors.isLoading,
2017-09-10 19:26:57		    controllers: state.fetchDoors.controllers
2017-09-10 19:26:57		  }
2017-09-10 19:26:57		}```
2017-09-10 19:28:00	pandoraddict	DELETE: the next slide on Render Logic - however...
2017-09-10 19:30:59	pandoraddict	I really like your Rendering Lists slide 👍
2017-09-10 19:42:00	Paisley	<@269551877970984960> you never dispatch a FETCH_DOORS_SUCCESS method
2017-09-10 19:42:38	Paisley	EDIT: <@269551877970984960> you never dispatch a FETCH_DOORS_SUCCESS action
2017-09-10 19:47:06	MartinNord	<@157607288805392385> yeah, you're right. Im uncertain where to put it :S
2017-09-10 19:47:15	MartinNord	After: `dispatch(setDoors(doors))`?
2017-09-10 19:47:38	Paisley	no
2017-09-10 19:47:43	Paisley	why are you dispatching a SET_DOORS action?
2017-09-10 19:47:58	Paisley	why not just dispatch FETCH_DOORS_SUCCESS instead?
2017-09-10 19:48:38	MartinNord	are you referring to this:
2017-09-10 19:48:38		```const setDoors = data => {
2017-09-10 19:48:38		  return {
2017-09-10 19:48:38		    type: 'SET_DOORS',
2017-09-10 19:48:38		    payload: {
2017-09-10 19:48:38		      setDoors: data
2017-09-10 19:48:38		    }
2017-09-10 19:48:38		  }
2017-09-10 19:48:38		}```
2017-09-10 19:48:55	Paisley	yes
2017-09-10 19:49:20	Paisley	you want to dispatch FETCH_DOORS_SUCCESS. so SET_DOORS is wrong
2017-09-10 19:49:48	MartinNord	yes, you are right. I tried it but I'm still only getting true :S
2017-09-10 19:50:12	MartinNord	oh
2017-09-10 19:51:11	MartinNord	now the setDoors is undefined 😅
2017-09-10 19:53:00	Paisley	your axios call looks wrong
2017-09-10 19:53:28	acemarke	eh, I think the axios call looks okay
2017-09-10 19:53:32	acemarke	but `setDoors` looks wrong in two ways
2017-09-10 19:53:43	acemarke	first, the reducer doesn't appear to be handling a `"SET_DOORS"` action type
2017-09-10 19:53:51	acemarke	second, you're passing in a promise as `action.payload.setDoors`
2017-09-10 19:53:55	acemarke	which will do nothing useful
2017-09-10 19:53:56	Paisley	no, look: `const doors = await axios.get(`${settings.hostname}/locks`).data`
2017-09-10 19:54:20	Paisley	he's taking data from the promise, which is undefined, rather than awaiting the promise and then getting data
2017-09-10 19:54:40	acemarke	hmm
2017-09-10 19:55:08	acemarke	I haven't used await yet, so yeah, I'm not sure whether that works out to "await the promise, then grab `response.data`" or not
2017-09-10 19:56:01	Paisley	can be fixed with brackets: `const doors = (await (axios.get(${settings.hostname}/locks)).data`
2017-09-10 19:56:13	Paisley	EDIT: can be fixed with brackets: `const doors = (await axios.get(${settings.hostname}/locks).data`
2017-09-10 19:56:45	Paisley	EDIT: can be fixed with brackets: ```
2017-09-10 19:56:45		const doors = (await axios.get(`${settings.hostname}/locks`).data
2017-09-10 19:56:45		```
2017-09-10 19:57:15	Paisley	EDIT: no, look: ```const doors = await axios.get(`${settings.hostname}/locks`).data```
2017-09-10 19:57:17	Bahamut	Or const { data: doors } = await ...
2017-09-10 19:57:31	Paisley	^ yeah that would be clearer
2017-09-10 19:59:36	MartinNord	thanks for helping me out. But I'm getting that `.data` is undefined. Does it have to do with something you said about "rather than awaiting the promise and then getting data" <@157607288805392385>
2017-09-10 19:59:39	MartinNord	EDIT: thanks for helping me out. But I'm getting that `.data` is undefined. Does it have to do with something you said about "rather than awaiting the promise and then getting data" <@157607288805392385> ?
2017-09-10 19:59:56	Paisley	yes
2017-09-10 20:00:06	MartinNord	hmm crap
2017-09-10 20:02:35	KGB	hey guys me again on Node/Express 😃 I m working on that Facebook validation thingy
2017-09-10 20:03:06	KGB	has anyone used passport.js here?
2017-09-10 20:04:14	KGB	https://github.com/gkatsanos/isawyou/blob/master/server/src/config/passport.js
2017-09-10 20:04:16	KGB	EDIT: https://github.com/gkatsanos/isawyou/blob/master/server/src/config/passport.js
2017-09-10 20:58:54	rjscoder	```js
2017-09-10 20:58:54		class TheaterSelectContainer extends Component {
2017-09-10 20:58:54		  constructor(props) {
2017-09-10 20:58:54		    super(props)
2017-09-10 20:58:54		    this.state = { theaters: [] }
2017-09-10 20:58:54		  }
2017-09-10 20:58:54		  componentDidMount() {
2017-09-10 20:58:54		  }
2017-09-10 20:58:54		  changeTheater = tribuneTheaterId => {
2017-09-10 20:58:54		    const newUrl = `/theaters/${tribuneTheaterId}`
2017-09-10 20:58:54		    this.props.history.push(newUrl)
2017-09-10 20:58:54		    // window.location.href = newUrl
2017-09-10 20:58:54		  }
2017-09-10 20:58:54		  render() {
2017-09-10 20:58:54		    return (
2017-09-10 20:58:54		      <TheaterSelect
2017-09-10 20:58:54		        value={this.props.match.params.id || null}
2017-09-10 20:58:54		        changeTheater={this.changeTheater}
2017-09-10 20:58:54		        options={this.state.theaters}
2017-09-10 20:58:54		      />
2017-09-10 20:58:54		    )
2017-09-10 20:58:54		  }
2017-09-10 20:58:54		}
2017-09-10 20:58:54		export default compose(withRouter)(TheaterSelectContainer)
2017-09-10 20:58:54		```
2017-09-10 20:59:07	rjscoder	`changeTheater` only replaces the address bar URL
2017-09-10 20:59:09	rjscoder	and does not update props
2017-09-10 20:59:13	rjscoder	on history.push()
2017-09-10 20:59:15	rjscoder	why?
2017-09-10 20:59:34	rjscoder	EDIT: and does not update the react element
2017-09-10 20:59:42	rjscoder	EDIT: and does not update the react element on `history.push()`
2017-09-10 20:59:45	rjscoder	DELETE: on history.push()
2017-09-10 21:01:20	rjscoder	history.push works in other locations
2017-09-10 21:07:37	rjscoder	im notusing redux in this project
2017-09-10 21:08:35	BTM	Are you're redirecting from one route when a component is mounted, to another route where the same component is mounted?
2017-09-10 21:08:52	BTM	Eg. changing from one Theater to another
2017-09-10 22:48:42	Elijah	is there a way to pass down all props and functions?
2017-09-10 22:48:56	Elijah	{...this}
2017-09-10 22:50:32	Paisley	{...this.props}
2017-09-10 22:50:41	Elijah	does that pass functions too?
2017-09-10 22:50:53	Paisley	no, but you probably don't want to do that
2017-09-10 22:51:30	Elijah	and on the very top level it's {...this.state} right?
2017-09-10 22:53:59	Elijah	and let's say theoretically I want to pass down all my functions for lols
2017-09-10 22:54:06	Elijah	how would one go about doing that?
2017-09-10 22:54:23	Elijah	`{...this}` ?
2017-09-10 22:55:18	Paisley	it will pass down more than just functions
2017-09-10 22:55:35	Paisley	i would just pass specific things that you want to pass, it'll be much better understandable code
2017-09-10 22:56:17	Elijah	yeah this is just a theoretical question..
2017-09-10 22:56:18	Elijah	😃
2017-09-10 22:56:52	Paisley	also you would need to make sure all functions are bound to this
2017-09-10 22:57:01	Paisley	it will even pass your render function
2017-09-10 22:57:44	Elijah	oh no way haha
2017-09-10 22:58:43	Elijah	it doesn't look like the render is in "this"
2017-09-10 22:58:52	Elijah	console.log(this);
2017-09-10 22:58:52		https://media.discordapp.net/attachments/103696749012467712/356544072506146816/unknown.png
2017-09-10 22:59:12	infected mushroom	Need some expert comment on the way the author wrote about the architecture. Is it correct?
2017-09-10 22:59:12		https://medium.com/mofed/react-redux-architecture-overview-7b3e52004b6e
2017-09-10 22:59:14	infected mushroom	EDIT: Need some expert comment on the way the author wrote about the architecture. Is it correct?
2017-09-10 22:59:14		https://medium.com/mofed/react-redux-architecture-overview-7b3e52004b6e
2017-09-10 22:59:40	Paisley	@Elijah that doesn't mean anything. render is in the prototype
2017-09-10 23:00:09	Elijah	oh i see it now
2017-09-10 23:00:15	Elijah	so will that like... double render? haha
2017-09-10 23:00:19	Paisley	no
2017-09-10 23:00:26	Paisley	it will mean the child has this.props.render
2017-09-10 23:00:34	Elijah	its just useless information then
2017-09-10 23:00:37	Paisley	it just means you're passing a load of useless junk yeah
2017-09-10 23:00:44	Paisley	and you don't really know what you're passing
2017-09-10 23:01:02	Elijah	is there any way to just send like... everything except the proto and reactInternalInstance
2017-09-10 23:01:02	Elijah	lol
2017-09-10 23:01:20	Paisley	"theoretically"?
2017-09-10 23:01:27	Paisley	except
2017-09-10 23:01:27	Elijah	or to exclude shit from a spread
2017-09-10 23:01:28	Elijah	yeah 😃
2017-09-10 23:01:38	Paisley	i assume you actually want some functions from the prototype
2017-09-10 23:01:46	Paisley	otherwise what's the point
2017-09-10 23:01:55	Paisley	you are trying to send your onStuff handlers right/
2017-09-10 23:01:57	Paisley	EDIT: you are trying to send your onStuff handlers right?
2017-09-10 23:02:06	Elijah	yeah
2017-09-10 23:02:12	Elijah	but that's not in proto
2017-09-10 23:02:22	Elijah	I didn't call it "onClick"
2017-09-10 23:02:26	Paisley	well firstly, they shouldn't be named the same as the props anyway
2017-09-10 23:02:28	Paisley	yeah exactly
2017-09-10 23:02:37	Paisley	onClick={this.handleClick}
2017-09-10 23:02:37	Elijah	hmm
2017-09-10 23:02:44	Elijah	yeah
2017-09-10 23:02:55	Paisley	i think in the time you have spent pondering this, you could've just written this out by hand with the specific handlers you want
2017-09-10 23:03:14	Elijah	so you want to go local handleClick then in the handleClick you call the parent function right?
2017-09-10 23:03:22	Elijah	I think that's how I had to od it before
2017-09-10 23:03:46	Elijah	yeah I mean, I already have done all this stuff by hand. hah
2017-09-10 23:03:48	Paisley	normally the props is called onFoo but the class function is called handleFoo, that's the convention most people use
2017-09-10 23:03:54	Paisley	EDIT: normally the prop is called onFoo but the class function is called handleFoo, that's the convention most people use
2017-09-10 23:04:03	Elijah	right
2017-09-10 23:04:11	Paisley	it really helps to distinguish where you are passing and where there is an actual function
2017-09-10 23:04:19	Elijah	ok that makes sense
2017-09-10 23:04:39	Elijah	this is all like.. just curiosity.
2017-09-10 23:05:05	Paisley	but the {...this} thing, i really wouldn't do it. ok so you could exclude the specific props you want, but maybe in the next version of react they will add something new to the Component class, and you'll start getting an error and have no idea why
2017-09-10 23:05:18	Paisley	EDIT: but the {...this} thing, i really wouldn't do it. ok so you could exclude the specific props you don't want, but maybe in the next version of react they will add something new to the Component class, and you'll start getting an error and have no idea why
2017-09-10 23:05:30	Paisley	also makes it really hard to trace where those functions are getting passed down from
2017-09-10 23:05:46	Elijah	right
2017-09-10 23:05:56	Paisley	it's very common to do it with props because sometimes you don't know what props will be passed, e.g. if you are wrapping a html element, you want to pass on all additional props
2017-09-10 23:06:17	Elijah	yeah or in my case, my app is so tiny that writing out all the things for 1 level down is just a pain
2017-09-10 23:06:18	Paisley	in those cases you use destructuring and rest syntax to extract the props that your component cares about, and spread the rest of them onto the component
2017-09-10 23:06:22	Paisley	it looks like this
2017-09-10 23:06:34	Elijah	hmmmm
2017-09-10 23:06:47	Paisley	```
2017-09-10 23:06:47		const { prop1, prop2, ...others } = this.props;
2017-09-10 23:06:47		return <ChildComponent {...others}/>;
2017-09-10 23:06:47		```
2017-09-10 23:06:52	Paisley	EDIT: ```jsx
2017-09-10 23:06:52		const { prop1, prop2, ...others } = this.props;
2017-09-10 23:06:52		return <ChildComponent {...others}/>;
2017-09-10 23:06:52		```
2017-09-10 23:07:08	Paisley	so this passes down everything except prop1 and prop2
2017-09-10 23:07:52	Paisley	if your app is tiny then there shouldn't be many things to pass down so it shouldn't be a pain 😉
2017-09-10 23:08:07	Paisley	if you're passing too many things down then maybe you're creating them at the wrong level
2017-09-10 23:08:21	Elijah	huh.
2017-09-10 23:08:24	Elijah	that is really cool
2017-09-10 23:08:34	Elijah	also that's possible
2017-09-10 23:08:44	Elijah	I am just going for quick and dirty for this proof of concept
2017-09-10 23:08:52	Elijah	its essentially going to be a slideshow
2017-09-10 23:09:04	Elijah	and after tuesday it is never going to be used or seen again
2017-09-10 23:09:29	Paisley	i built a prototype like that once
2017-09-10 23:09:33	Paisley	guess what, it ended up in production
2017-09-10 23:09:38	Elijah	haha
2017-09-10 23:09:47	Elijah	trust me
2017-09-10 23:09:51	Elijah	this one will not be used
2017-09-10 23:09:57	Elijah	if it is
2017-09-10 23:10:01	Elijah	then i will send you $500
2017-09-10 23:10:10	Paisley	hehehe
2017-09-10 23:10:10	Elijah	just so i learn my lesson
2017-09-10 23:11:59	KGB	I fixed the Facebook authentication 😄
2017-09-10 23:12:00	KGB	_joy_
2017-09-10 23:12:32	KGB	now I gotta figure out how this will work.. do I have to check if user has this token everytime he makes a new protected API call
2017-09-10 23:13:04	KGB	I mean FB sends back a Token which I push to my mongo DB
2017-09-10 23:14:02	KGB	Is this relevant? https://www.npmjs.com/package/connect-mongo
2017-09-10 23:14:04	KGB	EDIT: Is this relevant? https://www.npmjs.com/package/connect-mongo
2017-09-10 23:14:35	MartinNord	I checked if the user has a token in every request
2017-09-10 23:16:18	MartinNord	Or if you store a token in the local storage you can make a new component with React router that checks if there’s a token, if not you’ll get redirected to the login page
2017-09-10 23:17:14	MartinNord	https://youtu.be/oRL-pttfNSc
2017-09-10 23:17:16	MartinNord	EDIT: https://youtu.be/oRL-pttfNSc
2017-09-10 23:18:20	rob_aguilera	Is there some way to get around having to bind every function to `this` when working in a React class?  I feel like I remember there's some babel preset you can pass.
2017-09-10 23:18:34	rob_aguilera	EDIT: Is there some way to get around having to bind every function to `this` when working in a React class?  I feel like I remember there's some babel preset you can use.
2017-09-10 23:19:06	KGB	@Martin I guess localStorage is faster?
2017-09-10 23:26:59	jmager	```
2017-09-10 23:26:59		  const { user } = this.props;
2017-09-10 23:26:59		  var logs = [];
2017-09-10 23:26:59		  firebase.database().ref('users/' + user.id + '/logs').on('value', snapshot => {
2017-09-10 23:26:59		    snapshot.forEach((childSnapshot) => {
2017-09-10 23:26:59		      // get key for each log
2017-09-10 23:26:59		      var key = childSnapshot.key;
2017-09-10 23:26:59		      firebase.database().ref('logs/' + key).on('value', snapshot => {
2017-09-10 23:26:59		        logs.push(snapshot.val().date)
2017-09-10 23:26:59		      });
2017-09-10 23:26:59		   });
2017-09-10 23:26:59		 });
2017-09-10 23:26:59		 console.log("logs " + logs);
2017-09-10 23:26:59		```
2017-09-10 23:26:59		Hi, is the array logs out of scope inside the foreach loop in the next firebase snapshot?
2017-09-10 23:27:23	yawnypants5000	Can I capture keyboard events without a TextInput component? i.e. does the built-in keyboard need to be shown?
2017-09-10 23:27:39	jmager	I can get it to push to logs directly under key
2017-09-10 23:27:41	🐳 Lyrrad 🐳	<@192338278802784256> Yep. With class arrow functions I believe.
2017-09-10 23:40:49	Elijah	hey guys. so I'm trying to figure out how to make my code less redundant. is there any way to make this shorter?
2017-09-10 23:41:22	Elijah	```  var login = '';
2017-09-10 23:41:22		  switch (this.state.slide) {
2017-09-10 23:41:22		    case 0:
2017-09-10 23:41:22		      login = <Login {...this.state} updateSlide={this.updateSlide} />;
2017-09-10 23:41:22		      break;
2017-09-10 23:41:22		    case 1:
2017-09-10 23:41:22		      login = <InfoPersonal {...this.state} updateSlide={this.updateSlide} />;
2017-09-10 23:41:22		      break;
2017-09-10 23:41:22		    case 2:
2017-09-10 23:41:22		      login = <InfoBanking {...this.state} updateSlide={this.updateSlide} />;
2017-09-10 23:41:22		      break;
2017-09-10 23:41:22		    case 3:
2017-09-10 23:41:22		      login = <Dashboard {...this.state} updateSlide={this.updateSlide} />;
2017-09-10 23:41:22		      break;
2017-09-10 23:41:22		    default:
2017-09-10 23:41:22		  }```
2017-09-10 23:42:01	Elijah	like. is there a way to put `{...this.state} updateslide={this.updateSlide}` into some kind of variable?
2017-09-10 23:42:13	Elijah	just for readability
2017-09-10 23:44:10	Paisley	you could do:
2017-09-10 23:44:10		```jsx
2017-09-10 23:44:10		let Component;
2017-09-10 23:44:10		switch (this.state.slide) {
2017-09-10 23:44:10		  case 0:
2017-09-10 23:44:10		    Component =  Login;
2017-09-10 23:44:10		(...etc...)
2017-09-10 23:44:10		}
2017-09-10 23:44:10		const login = <Component {...this.state} {etc} />;
2017-09-10 23:44:10		```
2017-09-10 23:45:42	jmager	No one can help me out? I just feel like I got a dumb logic mistake somewhere 😦
2017-09-10 23:47:55	Paisley	@jmager the problem is that when you console.log(logs) the async stuff hasn't happened yet
2017-09-10 23:48:11	Paisley	logs will get populated later when the database returns results
2017-09-10 23:49:19	KGB	maybe try to sneak an async await in there
2017-09-10 23:49:35	KGB	(although I havent done Firebase so I dont know but it seems like a promise)
2017-09-10 23:49:43	Paisley	it doesn't look like promises
2017-09-10 23:49:47	Paisley	i don't see any .then()
2017-09-10 23:50:03	KGB	ye, callback I guess
2017-09-10 23:50:29	KGB	there's an "on" , some async event
2017-09-10 23:51:19	jmager	Okay, I tried async earlier.. but could only do it in the first DB reference i'm looking up the callback stuff rn
2017-09-10 23:51:22	jmager	tyvm
2017-09-10 23:52:57	acemarke	@infected mushroom : that's a decent article.  I really like this one:  https://www.mapbox.com/blog/redux-for-state-management-in-large-web-apps/
2017-09-10 23:53:36	acemarke	<@192338278802784256> : you're thinking of the Class Properties syntax, which is now a Stage 3 proposal
2017-09-10 23:54:53	Elijah	damn! @Paisley thank you!
2017-09-10 23:55:12	Elijah	I gotta always remember that my components are just objects.
2017-09-10 23:55:25	Elijah	still nub to this programming stuff I appreciate it
2017-09-10 23:55:42	Elijah	EDIT: I gotta always remember that my components are just objects / variables / some term that i dont know
2017-09-10 23:56:29	Elijah	EDIT: I gotta always remember that my components are just objects / variables / class? /  some term that i dont know
2017-09-11 11:49:06	HamidRaza	I am using moment.js for time and date functionality in my app. And at some places in the app i don't need to show any date by default. In such cases date will only be shown after some event has occured. 
2017-09-11 11:49:06		 For that purpose i am passing null to date value but moment.js giving me this error:
2017-09-11 11:49:06		Uncaught RangeError: Invalid time value
2017-09-11 11:49:06		Can anybody haw to resolve this? 
2017-09-11 11:49:06		How can i pass null to moment.js date/time?
2017-09-11 12:06:33	Paulquapper	does anyone know, whether and if, how, its possible to provide unique keys to react-jsonformschema? having some trouble on losing input focus after rerender
2017-09-11 12:28:06	Antony	Morning guys, I'm having some trouble with setting custom headers using axios
2017-09-11 12:28:29	Antony	for some reason, they're not being set when i look in the network tab on chrome
2017-09-11 12:28:55	Antony	```    const headers = {
2017-09-11 12:28:55		      headers: { 'Content-Type': 'application/json, text/plain, */*', 'token': token.replace('?token=', '') },
2017-09-11 12:28:55		    };
2017-09-11 12:28:55		    return axios.get(`http://trunk.io/webservice_dev.php/api/v1/customers/${customerID}/estimates/${estimateID}/estimateparts`, headers
2017-09-11 12:28:55		    )```
2017-09-11 12:29:07	Antony	apologies for weird formatting, this is my current setup
2017-09-11 12:30:37	thebailers	Hey all, working with an app which shows a loader, and then fetches all the data from the api, then removes the loader and loads up.
2017-09-11 12:30:37		What are the pros and cons of this as opposed to loading only the content you need on that screen in CDM?
2017-09-11 12:31:19	thebailers	IO guess the original app had a massive dashboard with tons of data there immediately, but this revision will only show small amounts of data, so that won't be the best method?
